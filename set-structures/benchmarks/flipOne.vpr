import "../preamble/generic.vpr"
import "../preamble/snap.vpr"


field val: Int
define TERM(u) u.val
define TERM_TRIGGER(u) u.val
define snap(g) snap$Ref$Int(g)
define min_all(g) min(snap(g), g)

method flipOne_1(g: Set [Ref], x: Ref, m: Int)
	requires forall n: Ref :: { n.val } n in g ==> acc(n.val)
	requires x in g

	requires m == min_all(g) && 0 <= m
    ensures forall n: Ref :: { n.val } n in g ==> acc(n.val)
    ensures -m == min_all(g)

{
	x.val := -1 * m 

    assert min(snap(g), Set(x)) == x.val        // UPDATE: triggering issue #1
    assert g setminus Set(x) union Set(x) == g  // SET THEORY: triggering issue #2
    // assert min(snap(g), g) == min(snap(g), g setminus Set(x) union Set(x))  // decomposition
    assert min(snap(g), g setminus Set(x)) == old(min(snap(g), g setminus Set(x)))  // FRAME: tiggering issue #3
    // assert min(snap(g), g) == -m
}

// domain Dummy { function @trig(Int): Bool }
define update(GRAPH, NODE, $fname, $val) {
    if (true) {

    label l0
    NODE.$fname := $val
    label l1
    assert (GRAPH setminus Set(NODE)) union Set(NODE) == GRAPH
    assert old[l0](min(snap(GRAPH), GRAPH setminus Set(NODE))) == min(snap(GRAPH), GRAPH setminus Set(NODE))
    
    // assert 
}

method flipOne_1_1_1(g: Set [Ref], x: Ref, m: Int)
	requires forall n: Ref :: { n.val } n in g ==> acc(n.val)
	requires x in g

	requires m == min_all(g) && 0 <= m
    ensures forall n: Ref :: { n.val } n in g ==> acc(n.val)
    ensures -m == min_all(g)
{
    // update(g, x, val, -1 * m)
    label l0
    x.val := -1 * m
    label l1
    // assert min(snap(g), Set(x)) == x.val
    assert g setminus Set(x) union Set(x) == g
    assert old[l0](min(snap(g), g setminus Set(x))) == min(snap(g), g setminus Set(x))
    // assert false
}

method flipOne_2(g: Set [Ref], x: Ref, y: Ref, m: Int)
	requires forall n: Ref :: { n.val } n in g ==> acc(n.val)
	requires x in g && y in g && x != y

	requires m == min_all(g) && 0 <= m
    ensures forall n: Ref :: { n.val } n in g ==> acc(n.val)
    ensures -m == min_all(g)

{
	x.val := -1 * m 

    assert min(snap(g), Set(x)) == x.val        // UPDATE: triggering issue #1
    assert g setminus Set(x) union Set(x) == g  // SET THEORY: triggering issue #2
    assert min(snap(g), g setminus Set(x)) == old(min(snap(g), g setminus Set(x)))  // FRAME: tiggering issue #3
    assert min_all(g) == -m                     // Intermediate state

    label l1

    y.val := -1 * m

    assert min(snap(g), Set(y)) == y.val        // UPDATE: triggering issue #1
    assert g setminus Set(y) union Set(y) == g  // SET THEORY: triggering issue #2
    assert min(snap(g), g setminus Set(y)) == old[l1](min(snap(g), g setminus Set(y)))  // FRAME: tiggering issue #3
}

method flipOne_2_2(g: Set [Ref], x: Ref, y: Ref, m: Int)
	requires forall n: Ref :: { n.val } n in g ==> acc(n.val)
	requires x in g && y in g && x != y

	requires m == min_all(g) && 0 <= m
    ensures forall n: Ref :: { n.val } n in g ==> acc(n.val)
    ensures -m == min_all(g)
{
    update(g, y, val, -1 * m)
    assert false

    update(g, x, val, -1 * m)
}

method flipOne_3(g: Set [Ref], x: Ref, y: Ref, z: Ref, m: Int)
	requires forall n: Ref :: { n.val } n in g ==> acc(n.val)
	requires x in g && y in g && z in g && x != y && x != z && y != z

	requires m == min_all(g) && 0 <= m
    ensures forall n: Ref :: { n.val } n in g ==> acc(n.val)
    ensures -m == min_all(g)

{
	x.val := -1 * m 


    assert min(snap(g), Set(x)) == x.val        // UPDATE: triggering issue #1
    assert g setminus Set(x) union Set(x) == g  // SET THEORY: triggering issue #2
    assert min(snap(g), g setminus Set(x)) == old(min(snap(g), g setminus Set(x)))  // FRAME: tiggering issue #3
    assert min_all(g) == -m

    label l1

    y.val := -1 * m

    assert min(snap(g), Set(y)) == y.val        // UPDATE: triggering issue #1
    assert g setminus Set(y) union Set(y) == g  // SET THEORY: triggering issue #2
    assert min(snap(g), g setminus Set(y)) == old[l1](min(snap(g), g setminus Set(y)))  // FRAME: tiggering issue #3
    assert min_all(g) == -m
    
    // assert min(snap(g), g setminus Set(y)) == old(min(snap(g), g setminus Set(y)))

    label l2

    z.val := -1 * m

    assert min(snap(g), Set(y)) == z.val        // UPDATE: triggering issue #1
    assert g setminus Set(z) union Set(z) == g  // SET THEORY: triggering issue #2
    assert min(snap(g), g setminus Set(z)) == old[l2](min(snap(g), g setminus Set(z)))  // FRAME: tiggering issue #3
}