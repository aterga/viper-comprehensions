define NODES(g, p)
    !(null in g) && 
    (forall n: Ref :: { n.val } n in g ==> acc(n.val, p))

//  comp[Int,+,0] n:Int {{ loc(a,n).val || 0 <= i && i < len(a) }}

function snap$Int$Int(g: Set[Ref]): Map[Int, Int]
    requires NODES(g, wildcard)
    ensures domain(result) == domain(lift(g))
    ensures forall u:Int :: 
        { TAU_BODY(u) }
        { result[u] }
            u in domain(lift(g)) ==> result[u] == BODY(u)


