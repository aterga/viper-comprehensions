// import "../map.vpr"

domain SetComp[T, S] {
    function comp(_t: Int, R: Map[T, S], F: Set[T]): S
    function __syn_comp__(_t: Int, R: Map[T, S], F: Set[T]): S
    
    function __step__(_t: Int, S, S): S

    axiom CommutativityOfStep {
        forall _t: Int, _l: S, _r: S :: { __step__(_t, _l, _r) }
            __step__(_t, _l, _r) == __step__(_t, _r, _l)
    }

    function dum1(bla: Bool): Bool
    function dum2(bla: T): Bool

    axiom ax_synonym {
        forall _t: Int, R: Map[T, S], F: Set[T] :: 
            { comp(_t, R, F) }
                __syn_comp__(_t, R, F) == comp(_t, R, F)
    }

    axiom Singleton {
        forall t: Int, R: Map[T, S], a: T ::
            { comp(t, R, Set(a)) }
                a in domain(R) ==> comp(t, R, Set(a)) == R[a]
    }

    axiom SameTerm {
        forall _t: Int, R1: Map[T, S], R2: Map[T, S], F: Set[T] :: 
            { comp(_t, R1, F), comp(_t, R2, F) }
            { F subset domain(R1), comp(_t, R2, F) }  // very bad for MinArraySum
                F != Set() && 
                F subset domain(R1) && F subset domain(R2) &&
                (forall a: T :: 
                    { R1[a], R2[a] }
                    // { R2[a] }
                        a in F ==> R1[a] == R2[a])
                ==> __syn_comp__(_t, R1, F) == comp(_t, R2, F)
    }

    axiom DropOne {
        forall t: Int, R: Map[T, S], a: T, F: Set[T] :: 
            { comp(t, R, F setminus Set(a)) }
                a in F && F != Set(a) && F subset domain(R) ==> comp(t, R, F) == 
                    __step__(t, __syn_comp__(t, R, F setminus Set(a)), R[a])
    }

    axiom TakeOne {
        forall t: Int, R: Map[T, S], a: T, F: Set[T] ::
            { comp(t, R, Set(a) union F) } 
            { comp(t, R, F union Set(a)) } 
            // { R[a], comp(t, R, F) }
            // { comp(t, R, F union Set(a)) } 
            // { comp(t, R, F), R[a] }
                F != Set() && F subset domain(R) && a in domain(R) && !(a in F) ==> 
                    comp(t, R, Set(a) union F) == 
                        __step__(t, __syn_comp__(t, R, F), R[a])
    }

    axiom DropMultiple {
        forall t: Int, R: Map[T, S], A: Set[T], F: Set[T] :: 
            { comp(t, R, F setminus A) }
                A != F && A != Set() && F subset domain(R) && 
                A subset F ==> comp(t, R, F) == 
                    __step__(t, __syn_comp__(t, R, F setminus A), __syn_comp__(t, R, A))
    }

    axiom TakeMultiple {
        forall t: Int, R: Map[T, S], F1: Set[T], F2: Set[T] :: 
            { comp(t, R, F1 union F2) }
                F1 != Set() && F2 != Set() && F1 subset domain(R) && F2 subset domain(R) &&
                F1 intersection F2 == Set() ==>
                    comp(t, R, F1 union F2) ==__step__(t, 
                        __syn_comp__(t, R, F1), __syn_comp__(t, R, F2))
    }
}


define __kind_prod__ 2
define __kind_sum__ 1
define __kind_min__ 0

define __min__($left, $right) __step__(__kind_min__, $left, $right)


domain SetMin[T, S] {

    function min(R: Map[T, S], F: Set[T]): S

    axiom ax_min {
        forall R: Map[T, S], F: Set[T] ::
            { min(R, F) }
                min(R, F) == comp(__kind_min__, R, F)
    }

    axiom ax_min_step {
        forall x: Int, y: Int :: 
            { __step__(__kind_min__, x, y) }
                (__step__(__kind_min__, x, y) == x || __step__(__kind_min__, x, y) == y)
                && __step__(__kind_min__, x, y) <= x
                && __step__(__kind_min__, x, y) <= y
    }

    function pick(F: Set[T]): T
    axiom {
        forall F: Set[T] :: { pick(F) }
            F != Set() ==> pick(F) in F
    }
    function dum(a: T): Bool
    axiom {
        forall a:T :: {dum(a)} dum(a)
    }
    axiom {
        forall R0: Map[Int, Int], R1: Map[Int, Int], F0: Set[Int] :: 
            { min(R0, F0), min(R1, F0) }
                (F0 != Set() && F0 subset domain(R0) && F0 subset domain(R1) && 
                R0 != R1 && 
                (forall a: Int, b: Int :: 
                    { R0[a], R0[b], R1[a], R1[b] }
                        a in F0 && b in F0 ==> R0[b]+R1[a] == R1[b]+R0[a])) ==> 
                    (min(R0, F0) + R1[pick(F0)] == 
                     min(R1, F0) + R0[pick(F0)])  // Note: args for pick must be the same in both cases! 
    }
}


domain SetSum[T, S] {

    function sum(R: Map[T, S], F: Set[T]): S

    axiom ax_sum {
        forall R: Map[T, S], F: Set[T] ::
            { sum(R, F) }
                sum(R, F) == comp(__kind_sum__, R, F)
    }

    axiom ax_sum_step {
        forall x: Int, y: Int :: 
            { __step__(__kind_sum__, x, y) }
                __step__(__kind_sum__, x, y) == x + y
    }

    // Sum-specific axioms

    axiom EmptySumFilter {
        (forall R: Map[T, Int], F: Set[T] :: { sum(R, F) }
            F == Set() ==> sum(R, F) == 0) //&& 
        // (forall R: Map[T, Int] :: { sum(R, Set()) }
        //     sum(R, Set()) == 0)  
    }

    axiom IntSumZero {
        forall R: Map[T, Int], F: Set[T] :: { sum(R, F) }
            F != Set() && F subset domain(R) && 
            (forall x: T :: { R[x] } x in F ==> R[x] == 0) ==> sum(R, F) == 0
    }

    axiom IntSumPositive {
        forall R: Map[T, Int], F: Set[T] :: { sum(R, F) }
            F != Set() && F subset domain(R) && 
            (forall x: T :: { R[x] } x in F ==> R[x] >= 0) ==> sum(R, F) >= 0
    }

}

domain SetProd[T, S] {

    function prod(R: Map[T, S], F: Set[T]): S

    axiom ax_prod {
        forall R: Map[T, S], F: Set[T] ::
            { prod(R, F) }
                prod(R, F) == comp(__kind_prod__, R, F)
    }

    axiom ax_prod_step {
        forall x: Int, y: Int :: 
            { __step__(__kind_prod__, x, y) }
                __step__(__kind_prod__, x, y) == x * y
    }
}

// define UPDATE(GRAPH, NODE, fieldname, value) {
    
//     if (false) {
//         label l0
//         NODE.fieldname := value
//         label l1

//         assert (GRAPH setminus Set(NODE)) union Set(NODE) == GRAPH
//         assert old[l0](min(snap(GRAPH), GRAPH setminus Set(NODE))) 
//             == min(snap(GRAPH), GRAPH setminus Set(NODE))
//     }
// }


define count(R, F) sum(R, F)