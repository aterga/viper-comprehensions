// import "comp.vpr"
import "count_val.vpr"
import "array.vpr"


define ArraySegment(a,lo,hi,p) forall z: Int :: lo <= z && z < hi ==> acc(loc(a,z).val, p)

function a2s(a: Array): Seq[Int]
//   requires none < p && p < write
  requires ArraySegment(a,0,len(a),wildcard)
  ensures |result| == len(a)
  ensures  forall i: Int :: 
    { loc(a,i).val }
    { result[i] }
        0 <= i && i < len(a) ==> result[i] == loc(a,i).val


field val: Int
method binarySearch_v1(a: Array, target: Int, lo: Int, hi: Int) 
    returns (res: Bool)
    requires 0 <= lo && lo <= hi && hi < len(a)
    requires ArraySegment(a,0,len(a),write)
    ensures ArraySegment(a,0,len(a),write)
    ensures a2s(a) == old(a2s(a))  // the procedure does not modify the array
    ensures count(old(a2s(a)), lo, hi) > 0 <==> res
{
    assume target == 0
    if (lo == hi) {
        res := false
    } elseif (lo+1 == hi) {
        res := (loc(a,lo).val == target)
    } else {
        // 0  1  2  3  4  5
        // [] [] [] [] [] []
        //    lo pi    hi
        //    lo    pi    hi
        var pivot: Int := (hi + lo) \ 2
        var res1: Bool 
        var res2: Bool
        res1 := binarySearch_v1(a, target, lo, pivot)
        res2 := binarySearch_v1(a, target, pivot, hi)

        res := (res1 || res2)

        assert count(old(a2s(a)), lo, hi) > 0 ==> res1 || res2


        assert count(old(a2s(a)), lo, pivot) > 0 <==> res1
        assert count(old(a2s(a)), pivot, hi) > 0 <==> res2

        assert res1 || res2 ==> 
            (count(old(a2s(a)), lo, pivot) + count(old(a2s(a)), pivot, hi)) > 0
        
        assert res1 || res2 ==> count(old(a2s(a)), lo, hi) > 0

    }
}


function a2s_range(a: Array, lo: Int, hi: Int): Seq[Int]
  requires ArraySegment(a, lo,hi, wildcard)
  requires 0 <= lo && lo <= hi && hi < len(a)
  ensures |result| == hi - lo
  ensures  forall i: Int :: 
    { loc(a,i).val } 
        lo <= i && i < hi ==> result[i-lo] == loc(a,i).val
  ensures forall mid: Int :: 
    { a2s_range(a, lo, mid) }
    { a2s_range(a, mid, hi) }
        lo <= mid && mid < hi ==> a2s_range(a, lo, mid) ++ a2s_range(a, mid, hi) == result

//   ensures  forall i: Int :: 
//     // { loc(a,i).val } 
//     { result[i] } 
//         0 <= i && i < hi-lo ==> result[i] == loc(a,i+lo).val

define count_all(a, lo, hi)
    count(a2s_range(a, lo, hi), 0, hi-lo)


method binarySearch_v2(a: Array, /*target: Int,*/ lo: Int, hi: Int) 
    returns (res: Bool)

    requires 0 <= lo && lo <= hi && hi < len(a)
    requires ArraySegment(a, lo, hi, write)
    ensures ArraySegment(a, lo, hi, write)
    // ensures a2s_range(a, lo, hi) == old(a2s_range(a, lo, hi))
    ensures count_all(a, lo, hi) > 0 <==> res
{
    if (lo == hi) {
        res := false
    } elseif (lo+1 == hi) {
        res := (loc(a,lo).val == 0/*target*/)
    } else {
        // 0  1  2  3  4  5
        // [] [] [] [] [] []
        //    lo pi    hi
        //    lo    pi    hi
        var pivot: Int := (hi + lo) \ 2
        var res1: Bool 
        var res2: Bool
        res1 := binarySearch_v2(a, /*target,*/ lo, pivot)

        // assert res1 ==> count(a2s_range(a, lo, pivot), 0, pivot-lo) > 0
        res2 := binarySearch_v2(a, /*target,*/ pivot, hi)
        // assert a2s_range(a, lo, hi) == old(a2s_range(a, lo, hi))
        // assert res1 ==> count(a2s_range(a, lo, pivot), 0, pivot-lo) > 0
        // assert res2 ==> count(a2s_range(a, pivot, hi), 0, hi-pivot) > 0

        res := (res1 || res2)

        // assert res ==> count(a2s_range(a, lo, pivot), 0, pivot-lo) > 0 || count(a2s_range(a, pivot, hi), 0, hi-pivot) > 0

        // assert |a2s_range(a, lo, pivot)| == pivot-lo
        // assert |a2s_range(a, pivot, hi)| == hi-pivot
        // assert |a2s_range(a, lo, pivot)| + |a2s_range(a, pivot, hi)| == |a2s_range(a, lo, hi)|
        // assert |a2s_range(a, lo, hi)| == hi-lo
        assume a2s_range(a, lo, pivot) ++ a2s_range(a, pivot, hi) == a2s_range(a, lo, hi) // problematic bit

        
        // var aa: Seq[Int] := a2s_range(a, lo, pivot)
        // var bb: Seq[Int] := a2s_range(a, pivot, hi)
        // // assert 
        // assert count(aa, 0, |aa|) + 
        //        count(bb, 0, |bb|) ==
        //         count(aa++bb, 0, hi-lo)


        // pivot-lo   - 0 + hi-pivot == hi - lo

        // assume a2s_range(a, lo, hi) == old(a2s_range(a, lo, hi))

        assert res ==> count_all(a, lo, hi) > 0
        // assert false
    }
}

method binarySearch_v3(a: Array, /*target: Int,*/ lo: Int, hi: Int, p: Perm)
    returns (res: Bool)

    requires 0 <= lo && lo <= hi && hi < len(a)
    requires none < p && p < write
    requires ArraySegment(a, 0, len(a), p)
    ensuresArraySegment(a, 0, len(a), p)
    // ensures a2sp(a) == old(a2sp(a))  // the procedure does not modify the array
    ensures count(old(a2s(a)), lo, hi) > 0 <==> res
{
    if (lo == hi) {
        res := false
    } elseif (lo+1 == hi) {
        res := (loc(a,lo).val == 0/*target*/)
    } else {
        // 0  1  2  3  4  5
        // [] [] [] [] [] []
        //    lo pi    hi
        //    lo    pi    hi
        var pivot: Int := (hi + lo) \ 2
        var res1: Bool 
        var res2: Bool

        res1 := binarySearch_v3(a, /*target,*/ lo, pivot, p/2)
        res2 := binarySearch_v3(a, /*target,*/ pivot, hi, p/2)

        res := (res1 || res2)
    }
}

method binarySearch_v4(a: Array, /*target: Int,*/ lo: Int, hi: Int, p: Perm)
    returns (res: Bool)

    requires 0 <= lo && lo <= hi && hi < len(a)
    requires none < p && p < write
    requires ArraySegment(a, 0, len(a), p)
    ensures ArraySegment(a, 0, len(a), p)
    // ensures a2sp(a) == old(a2sp(a))  // the procedure does not modify the array
    ensures count(old(a2s(a)), lo, hi) > 0 <==> res
{
    if (lo == hi) {
        res := false
    } elseif (lo+1 == hi) {
        res := (loc(a,lo).val == 0/*target*/)
    } else {
        // 0  1  2  3  4  5
        // [] [] [] [] [] []
        //    lo pi    hi
        //    lo    pi    hi
        var pivot_a: Int := (  hi + 2*lo) \ 3
        var pivot_b: Int := (2*hi +   lo) \ 3
        
        var res1: Bool 
        var res2: Bool
        var res3: Bool

        // assert 
        assert lo <= pivot_a
        res1 := binarySearch_v4(a, /*target,*/ lo, pivot_a, p/2)
        res2 := binarySearch_v4(a, /*target,*/ pivot_a, pivot_b, p/2)
        res3 := binarySearch_v4(a, /*target,*/ pivot_b, hi, p/2)

        res := (res1 || res2 || res3)

        // assert count(old(a2sp(a)), lo, hi) == 
        //         count(old(a2sp(a)), lo, pivot_a) + count(old(a2sp(a)), pivot_a, hi)
        // assert count(old(a2sp(a)), pivot_a, hi) == 
        //         count(old(a2sp(a)), pivot_a, pivot_b) + count(old(a2sp(a)), pivot_b, hi)
        // assert count(old(a2sp(a)), lo, hi) == 
        //         count(old(a2sp(a)), lo, pivot_a) + 
        //         count(old(a2sp(a)), pivot_a, pivot_b) + 
        //         count(old(a2sp(a)), pivot_b, hi)
        // assert count(old(a2sp(a)), lo, hi) > 0 ==> res  // not ok
        // assert res ==> count(old(a2sp(a)), lo, hi) > 0  // ok
        // assert count(old(a2sp(a)), lo, hi) > 0 <==> res
        // assert false
    }
}


// method binarySearch_v5(a: Array, target: Int, lo: Int, hi: Int) 
//     returns (res: Bool)
//     requires 0 <= lo && lo <= hi && hi < len(a)
//     requires ArraySegment(a,lo,hi,write)
//     ensures ArraySegment(a,lo,hi,write)
//     ensures a2s(a) == old(a2s(a))  // the procedure does not modify the array
//     ensures count(old(a2s(a)), lo, hi) > 0 <==> res
// {
//     assume target == 0
//     if (lo == hi) {
//         res := false
//     } elseif (lo+1 == hi) {
//         res := (loc(a,lo).val == target)
//     } else {
//         // 0  1  2  3  4  5
//         // [] [] [] [] [] []
//         //    lo pi    hi
//         //    lo    pi    hi
//         var pivot: Int := (hi + lo) \ 2
//         var res1: Bool 
//         var res2: Bool
//         res1 := binarySearch_v5(a, target, lo, pivot)
//         res2 := binarySearch_v5(a, target, pivot, hi)

//         res := (res1 || res2)

//         // assert count(old(a2s(a)), lo, hi) > 0 ==> res1 || res2


//         // assert count(old(a2s(a)), lo, pivot) > 0 <==> res1
//         // assert count(old(a2s(a)), pivot, hi) > 0 <==> res2

//         // assert res1 || res2 ==> 
//         //     (count(old(a2s(a)), lo, pivot) + count(old(a2s(a)), pivot, hi)) > 0
        
//         // assert res1 || res2 ==> count(old(a2s(a)), lo, hi) > 0

//     }
// }
